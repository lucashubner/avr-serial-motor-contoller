
bin/Debug/source-code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000009f2  00000a86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .fuse         00000003  00820000  00820000  00000a8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .stab         00003108  00000000  00000000  00000a90  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000023b1  00000000  00000000  00003b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00005f49  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005f5c  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  00005f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  00006590  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001d  00000000  00000000  00006b32  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  00006b4f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__ctors_end>
   4:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
   8:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
   c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  10:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  14:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  18:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  1c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  20:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  24:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  28:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  2c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  30:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  34:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  38:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  3c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  40:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  44:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  48:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  4c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  50:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  54:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  58:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  5c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  60:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  64:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  68:	fd 01       	movw	r30, r26
  6a:	37 01       	movw	r6, r14
  6c:	40 01       	movw	r8, r0
  6e:	49 01       	movw	r8, r18
  70:	52 01       	movw	r10, r4
  72:	5b 01       	movw	r10, r22
  74:	05 02       	muls	r16, r21
  76:	05 02       	muls	r16, r21
  78:	b5 01       	movw	r22, r10
  7a:	be 01       	movw	r22, r28
  7c:	64 01       	movw	r12, r8
  7e:	6d 01       	movw	r12, r26
  80:	76 01       	movw	r14, r12
  82:	7f 01       	movw	r14, r30
  84:	88 01       	movw	r16, r16
  86:	91 01       	movw	r18, r2
  88:	9a 01       	movw	r18, r20
  8a:	a3 01       	movw	r20, r6
  8c:	ac 01       	movw	r20, r24
  8e:	05 02       	muls	r16, r21
  90:	05 02       	muls	r16, r21
  92:	05 02       	muls	r16, r21
  94:	c7 01       	movw	r24, r14
  96:	d0 01       	movw	r26, r0
  98:	d9 01       	movw	r26, r18
  9a:	e2 01       	movw	r28, r4
  9c:	eb 01       	movw	r28, r22
  9e:	f4 01       	movw	r30, r8
  a0:	ec 02       	muls	r30, r28
  a2:	10 02       	muls	r17, r16
  a4:	1a 02       	muls	r17, r26
  a6:	24 02       	muls	r18, r20
  a8:	2e 02       	muls	r18, r30
  aa:	38 02       	muls	r19, r24
  ac:	f5 02       	muls	r31, r21
  ae:	f5 02       	muls	r31, r21
  b0:	9c 02       	muls	r25, r28
  b2:	a6 02       	muls	r26, r22
  b4:	42 02       	muls	r20, r18
  b6:	4c 02       	muls	r20, r28
  b8:	56 02       	muls	r21, r22
  ba:	60 02       	muls	r22, r16
  bc:	6a 02       	muls	r22, r26
  be:	74 02       	muls	r23, r20
  c0:	7e 02       	muls	r23, r30
  c2:	88 02       	muls	r24, r24
  c4:	92 02       	muls	r25, r18
  c6:	f5 02       	muls	r31, r21
  c8:	f5 02       	muls	r31, r21
  ca:	f5 02       	muls	r31, r21
  cc:	b0 02       	muls	r27, r16
  ce:	ba 02       	muls	r27, r26
  d0:	c4 02       	muls	r28, r20
  d2:	ce 02       	muls	r28, r30
  d4:	d8 02       	muls	r29, r24
  d6:	e2 02       	muls	r30, r18

000000d8 <__ctors_end>:
  d8:	11 24       	eor	r1, r1
  da:	1f be       	out	0x3f, r1	; 63
  dc:	cf ef       	ldi	r28, 0xFF	; 255
  de:	d8 e0       	ldi	r29, 0x08	; 8
  e0:	de bf       	out	0x3e, r29	; 62
  e2:	cd bf       	out	0x3d, r28	; 61

000000e4 <__do_copy_data>:
  e4:	11 e0       	ldi	r17, 0x01	; 1
  e6:	a0 e0       	ldi	r26, 0x00	; 0
  e8:	b1 e0       	ldi	r27, 0x01	; 1
  ea:	e2 ef       	ldi	r30, 0xF2	; 242
  ec:	f9 e0       	ldi	r31, 0x09	; 9
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <__do_copy_data+0x10>
  f0:	05 90       	lpm	r0, Z+
  f2:	0d 92       	st	X+, r0
  f4:	a6 30       	cpi	r26, 0x06	; 6
  f6:	b1 07       	cpc	r27, r17
  f8:	d9 f7       	brne	.-10     	; 0xf0 <__do_copy_data+0xc>
  fa:	0e 94 83 00 	call	0x106	; 0x106 <main>
  fe:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <_exit>

00000102 <__bad_interrupt>:
 102:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000106 <main>:

#include "Motor.h"
#include "CommandParser.h"

int main(void)
{
 106:	cf 93       	push	r28
 108:	df 93       	push	r29
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
 10e:	62 97       	sbiw	r28, 0x12	; 18
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	f8 94       	cli
 114:	de bf       	out	0x3e, r29	; 62
 116:	0f be       	out	0x3f, r0	; 63
 118:	cd bf       	out	0x3d, r28	; 61
                15, // EN2 --> Enable Motor 2
                9,  // IN1 --> Turn Foward Motor 1
                10, // IN2 --> Turn Backward Motor 1
                13, // IN3 --> Turn Foward Motor 2
                14  // IN4 --> Turn FOward Motor 2
                );
 11a:	0f 2e       	mov	r0, r31
 11c:	fe e0       	ldi	r31, 0x0E	; 14
 11e:	cf 2e       	mov	r12, r31
 120:	d1 2c       	mov	r13, r1
 122:	f0 2d       	mov	r31, r0
 124:	0f 2e       	mov	r0, r31
 126:	fd e0       	ldi	r31, 0x0D	; 13
 128:	ef 2e       	mov	r14, r31
 12a:	f1 2c       	mov	r15, r1
 12c:	f0 2d       	mov	r31, r0
 12e:	0a e0       	ldi	r16, 0x0A	; 10
 130:	10 e0       	ldi	r17, 0x00	; 0
 132:	29 e0       	ldi	r18, 0x09	; 9
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	4f e0       	ldi	r20, 0x0F	; 15
 138:	50 e0       	ldi	r21, 0x00	; 0
 13a:	6b e0       	ldi	r22, 0x0B	; 11
 13c:	70 e0       	ldi	r23, 0x00	; 0
 13e:	ce 01       	movw	r24, r28
 140:	01 96       	adiw	r24, 0x01	; 1
 142:	0e 94 14 03 	call	0x628	; 0x628 <_ZN5MotorC1Eiiiiii>

    CommandParser parser;
 146:	ce 01       	movw	r24, r28
 148:	41 96       	adiw	r24, 0x11	; 17
 14a:	0e 94 cd 00 	call	0x19a	; 0x19a <_ZN13CommandParserC1Ev>
    parser.setMotor(&motor);
 14e:	be 01       	movw	r22, r28
 150:	6f 5f       	subi	r22, 0xFF	; 255
 152:	7f 4f       	sbci	r23, 0xFF	; 255
 154:	ce 01       	movw	r24, r28
 156:	41 96       	adiw	r24, 0x11	; 17
 158:	0e 94 ce 00 	call	0x19c	; 0x19c <_ZN13CommandParser8setMotorEP5Motor>
    while(1){

        parser.parseCommand("fw");
 15c:	60 e0       	ldi	r22, 0x00	; 0
 15e:	71 e0       	ldi	r23, 0x01	; 1
 160:	ce 01       	movw	r24, r28
 162:	41 96       	adiw	r24, 0x11	; 17
 164:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN13CommandParser12parseCommandEPc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 168:	2f ef       	ldi	r18, 0xFF	; 255
 16a:	89 e6       	ldi	r24, 0x69	; 105
 16c:	98 e1       	ldi	r25, 0x18	; 24
 16e:	21 50       	subi	r18, 0x01	; 1
 170:	80 40       	sbci	r24, 0x00	; 0
 172:	90 40       	sbci	r25, 0x00	; 0
 174:	e1 f7       	brne	.-8      	; 0x16e <main+0x68>
 176:	00 c0       	rjmp	.+0      	; 0x178 <main+0x72>
 178:	00 00       	nop
        _delay_ms(1000);

        parser.parseCommand("bw");
 17a:	63 e0       	ldi	r22, 0x03	; 3
 17c:	71 e0       	ldi	r23, 0x01	; 1
 17e:	ce 01       	movw	r24, r28
 180:	41 96       	adiw	r24, 0x11	; 17
 182:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN13CommandParser12parseCommandEPc>
 186:	2f ef       	ldi	r18, 0xFF	; 255
 188:	89 e6       	ldi	r24, 0x69	; 105
 18a:	98 e1       	ldi	r25, 0x18	; 24
 18c:	21 50       	subi	r18, 0x01	; 1
 18e:	80 40       	sbci	r24, 0x00	; 0
 190:	90 40       	sbci	r25, 0x00	; 0
 192:	e1 f7       	brne	.-8      	; 0x18c <main+0x86>
 194:	00 c0       	rjmp	.+0      	; 0x196 <main+0x90>
 196:	00 00       	nop
 198:	e1 cf       	rjmp	.-62     	; 0x15c <main+0x56>

0000019a <_ZN13CommandParserC1Ev>:
#include "CommandParser.h"
#include "Motor.h"

CommandParser::CommandParser()
 19a:	08 95       	ret

0000019c <_ZN13CommandParser8setMotorEP5Motor>:
{
    //ctor
}

void CommandParser::setMotor(Motor *motor){
    this->motor = motor;
 19c:	fc 01       	movw	r30, r24
 19e:	71 83       	std	Z+1, r23	; 0x01
 1a0:	60 83       	st	Z, r22
 1a2:	08 95       	ret

000001a4 <_ZN13CommandParser12parseCommandEPc>:
}

void CommandParser::parseCommand(char *command){
 1a4:	fc 01       	movw	r30, r24
    if(command[0] == 'f' && command[1] == 'w'){
 1a6:	db 01       	movw	r26, r22
 1a8:	9c 91       	ld	r25, X
 1aa:	96 36       	cpi	r25, 0x66	; 102
 1ac:	49 f4       	brne	.+18     	; 0x1c0 <_ZN13CommandParser12parseCommandEPc+0x1c>
 1ae:	11 96       	adiw	r26, 0x01	; 1
 1b0:	8c 91       	ld	r24, X
 1b2:	87 37       	cpi	r24, 0x77	; 119
 1b4:	81 f4       	brne	.+32     	; 0x1d6 <_ZN13CommandParser12parseCommandEPc+0x32>
        this->motor->forward();
 1b6:	80 81       	ld	r24, Z
 1b8:	91 81       	ldd	r25, Z+1	; 0x01
 1ba:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <_ZN5Motor7forwardEv>
 1be:	08 95       	ret
    }
    else if(command[0]=='b' && command[1] =='w'){
 1c0:	92 36       	cpi	r25, 0x62	; 98
 1c2:	49 f4       	brne	.+18     	; 0x1d6 <_ZN13CommandParser12parseCommandEPc+0x32>
 1c4:	db 01       	movw	r26, r22
 1c6:	11 96       	adiw	r26, 0x01	; 1
 1c8:	8c 91       	ld	r24, X
 1ca:	87 37       	cpi	r24, 0x77	; 119
 1cc:	21 f4       	brne	.+8      	; 0x1d6 <_ZN13CommandParser12parseCommandEPc+0x32>
        this->motor->backward();
 1ce:	80 81       	ld	r24, Z
 1d0:	91 81       	ldd	r25, Z+1	; 0x01
 1d2:	0e 94 80 03 	call	0x700	; 0x700 <_ZN5Motor8backwardEv>
 1d6:	08 95       	ret

000001d8 <_Z3maplllll>:
#include "common.h"
#include <avr/io.h>

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 1d8:	4f 92       	push	r4
 1da:	5f 92       	push	r5
 1dc:	6f 92       	push	r6
 1de:	7f 92       	push	r7
 1e0:	af 92       	push	r10
 1e2:	bf 92       	push	r11
 1e4:	cf 92       	push	r12
 1e6:	df 92       	push	r13
 1e8:	ef 92       	push	r14
 1ea:	ff 92       	push	r15
 1ec:	0f 93       	push	r16
 1ee:	1f 93       	push	r17
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
 1f4:	cd b7       	in	r28, 0x3d	; 61
 1f6:	de b7       	in	r29, 0x3e	; 62
 1f8:	29 01       	movw	r4, r18
 1fa:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 1fc:	9b 01       	movw	r18, r22
 1fe:	ac 01       	movw	r20, r24
 200:	24 19       	sub	r18, r4
 202:	35 09       	sbc	r19, r5
 204:	46 09       	sbc	r20, r6
 206:	57 09       	sbc	r21, r7
 208:	89 89       	ldd	r24, Y+17	; 0x11
 20a:	9a 89       	ldd	r25, Y+18	; 0x12
 20c:	ab 89       	ldd	r26, Y+19	; 0x13
 20e:	bc 89       	ldd	r27, Y+20	; 0x14
 210:	bc 01       	movw	r22, r24
 212:	cd 01       	movw	r24, r26
 214:	6a 19       	sub	r22, r10
 216:	7b 09       	sbc	r23, r11
 218:	8c 09       	sbc	r24, r12
 21a:	9d 09       	sbc	r25, r13
 21c:	0e 94 86 04 	call	0x90c	; 0x90c <__mulsi3>
 220:	a8 01       	movw	r20, r16
 222:	97 01       	movw	r18, r14
 224:	24 19       	sub	r18, r4
 226:	35 09       	sbc	r19, r5
 228:	46 09       	sbc	r20, r6
 22a:	57 09       	sbc	r21, r7
 22c:	0e 94 96 04 	call	0x92c	; 0x92c <__divmodsi4>
 230:	ca 01       	movw	r24, r20
 232:	b9 01       	movw	r22, r18
 234:	6a 0d       	add	r22, r10
 236:	7b 1d       	adc	r23, r11
 238:	8c 1d       	adc	r24, r12
 23a:	9d 1d       	adc	r25, r13
}
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	1f 91       	pop	r17
 242:	0f 91       	pop	r16
 244:	ff 90       	pop	r15
 246:	ef 90       	pop	r14
 248:	df 90       	pop	r13
 24a:	cf 90       	pop	r12
 24c:	bf 90       	pop	r11
 24e:	af 90       	pop	r10
 250:	7f 90       	pop	r7
 252:	6f 90       	pop	r6
 254:	5f 90       	pop	r5
 256:	4f 90       	pop	r4
 258:	08 95       	ret

0000025a <_Z7pinModeii>:

void pinMode(int pin, int mode){
    // PORTD
    switch(pin){
 25a:	01 97       	sbiw	r24, 0x01	; 1
 25c:	8c 31       	cpi	r24, 0x1C	; 28
 25e:	91 05       	cpc	r25, r1
 260:	08 f0       	brcs	.+2      	; 0x264 <_Z7pinModeii+0xa>
 262:	d3 c0       	rjmp	.+422    	; 0x40a <_Z7pinModeii+0x1b0>
 264:	8c 5c       	subi	r24, 0xCC	; 204
 266:	9f 4f       	sbci	r25, 0xFF	; 255
 268:	fc 01       	movw	r30, r24
 26a:	0c 94 b5 04 	jmp	0x96a	; 0x96a <__tablejump2__>
        case 2:  DDRD = mode==0?  DDRD | (1<< PD0) :   DDRD & ~(1<<PD0);    break;
 26e:	67 2b       	or	r22, r23
 270:	19 f4       	brne	.+6      	; 0x278 <_Z7pinModeii+0x1e>
 272:	8a b1       	in	r24, 0x0a	; 10
 274:	81 60       	ori	r24, 0x01	; 1
 276:	02 c0       	rjmp	.+4      	; 0x27c <_Z7pinModeii+0x22>
 278:	8a b1       	in	r24, 0x0a	; 10
 27a:	8e 7f       	andi	r24, 0xFE	; 254
 27c:	8a b9       	out	0x0a, r24	; 10
 27e:	08 95       	ret
        case 3:  DDRD = mode==0?  DDRD | (1<< PD1) :   DDRD & ~(1<<PD1);    break;
 280:	67 2b       	or	r22, r23
 282:	19 f4       	brne	.+6      	; 0x28a <_Z7pinModeii+0x30>
 284:	8a b1       	in	r24, 0x0a	; 10
 286:	82 60       	ori	r24, 0x02	; 2
 288:	02 c0       	rjmp	.+4      	; 0x28e <_Z7pinModeii+0x34>
 28a:	8a b1       	in	r24, 0x0a	; 10
 28c:	8d 7f       	andi	r24, 0xFD	; 253
 28e:	8a b9       	out	0x0a, r24	; 10
 290:	08 95       	ret
        case 4:  DDRD = mode==0?  DDRD | (1<< PD2) :   DDRD & ~(1<<PD2);    break;
 292:	67 2b       	or	r22, r23
 294:	19 f4       	brne	.+6      	; 0x29c <_Z7pinModeii+0x42>
 296:	8a b1       	in	r24, 0x0a	; 10
 298:	84 60       	ori	r24, 0x04	; 4
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <_Z7pinModeii+0x46>
 29c:	8a b1       	in	r24, 0x0a	; 10
 29e:	8b 7f       	andi	r24, 0xFB	; 251
 2a0:	8a b9       	out	0x0a, r24	; 10
 2a2:	08 95       	ret
        case 5:  DDRD = mode==0?  DDRD | (1<< PD3) :   DDRD & ~(1<<PD3);    break;
 2a4:	67 2b       	or	r22, r23
 2a6:	19 f4       	brne	.+6      	; 0x2ae <_Z7pinModeii+0x54>
 2a8:	8a b1       	in	r24, 0x0a	; 10
 2aa:	88 60       	ori	r24, 0x08	; 8
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <_Z7pinModeii+0x58>
 2ae:	8a b1       	in	r24, 0x0a	; 10
 2b0:	87 7f       	andi	r24, 0xF7	; 247
 2b2:	8a b9       	out	0x0a, r24	; 10
 2b4:	08 95       	ret
        case 6:  DDRD = mode==0?  DDRD | (1<< PD4) :   DDRD & ~(1<<PD4);    break;
 2b6:	67 2b       	or	r22, r23
 2b8:	19 f4       	brne	.+6      	; 0x2c0 <_Z7pinModeii+0x66>
 2ba:	8a b1       	in	r24, 0x0a	; 10
 2bc:	80 61       	ori	r24, 0x10	; 16
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <_Z7pinModeii+0x6a>
 2c0:	8a b1       	in	r24, 0x0a	; 10
 2c2:	8f 7e       	andi	r24, 0xEF	; 239
 2c4:	8a b9       	out	0x0a, r24	; 10
 2c6:	08 95       	ret
        case 11: DDRD = mode==0?  DDRD | (1<< PD5) :   DDRD & ~(1<<PD5);    break;
 2c8:	67 2b       	or	r22, r23
 2ca:	19 f4       	brne	.+6      	; 0x2d2 <_Z7pinModeii+0x78>
 2cc:	8a b1       	in	r24, 0x0a	; 10
 2ce:	80 62       	ori	r24, 0x20	; 32
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <_Z7pinModeii+0x7c>
 2d2:	8a b1       	in	r24, 0x0a	; 10
 2d4:	8f 7d       	andi	r24, 0xDF	; 223
 2d6:	8a b9       	out	0x0a, r24	; 10
 2d8:	08 95       	ret
        case 12: DDRD = mode==0?  DDRD | (1<< PD6) :   DDRD & ~(1<<PD6);    break;
 2da:	67 2b       	or	r22, r23
 2dc:	19 f4       	brne	.+6      	; 0x2e4 <_Z7pinModeii+0x8a>
 2de:	8a b1       	in	r24, 0x0a	; 10
 2e0:	80 64       	ori	r24, 0x40	; 64
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <_Z7pinModeii+0x8e>
 2e4:	8a b1       	in	r24, 0x0a	; 10
 2e6:	8f 7b       	andi	r24, 0xBF	; 191
 2e8:	8a b9       	out	0x0a, r24	; 10
 2ea:	08 95       	ret
        case 13: DDRD = mode==0?  DDRD | (1<< PD7) :   DDRD & ~(1<<PD7);    break;
 2ec:	67 2b       	or	r22, r23
 2ee:	19 f4       	brne	.+6      	; 0x2f6 <_Z7pinModeii+0x9c>
 2f0:	8a b1       	in	r24, 0x0a	; 10
 2f2:	80 68       	ori	r24, 0x80	; 128
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <_Z7pinModeii+0xa0>
 2f6:	8a b1       	in	r24, 0x0a	; 10
 2f8:	8f 77       	andi	r24, 0x7F	; 127
 2fa:	8a b9       	out	0x0a, r24	; 10
 2fc:	08 95       	ret

        // PORTB
        case 14: DDRB = mode==0?  DDRB | (1<< PB0) :   DDRB & ~(1<<PB0);    break;
 2fe:	67 2b       	or	r22, r23
 300:	19 f4       	brne	.+6      	; 0x308 <_Z7pinModeii+0xae>
 302:	84 b1       	in	r24, 0x04	; 4
 304:	81 60       	ori	r24, 0x01	; 1
 306:	02 c0       	rjmp	.+4      	; 0x30c <_Z7pinModeii+0xb2>
 308:	84 b1       	in	r24, 0x04	; 4
 30a:	8e 7f       	andi	r24, 0xFE	; 254
 30c:	84 b9       	out	0x04, r24	; 4
 30e:	08 95       	ret
        case 15: DDRB = mode==0?  DDRB | (1<< PB1) :   DDRB & ~(1<<PB1);    break;
 310:	67 2b       	or	r22, r23
 312:	19 f4       	brne	.+6      	; 0x31a <_Z7pinModeii+0xc0>
 314:	84 b1       	in	r24, 0x04	; 4
 316:	82 60       	ori	r24, 0x02	; 2
 318:	02 c0       	rjmp	.+4      	; 0x31e <_Z7pinModeii+0xc4>
 31a:	84 b1       	in	r24, 0x04	; 4
 31c:	8d 7f       	andi	r24, 0xFD	; 253
 31e:	84 b9       	out	0x04, r24	; 4
 320:	08 95       	ret
        case 16: DDRB = mode==0?  DDRB | (1<< PB2) :   DDRB & ~(1<<PB2);    break;
 322:	67 2b       	or	r22, r23
 324:	19 f4       	brne	.+6      	; 0x32c <_Z7pinModeii+0xd2>
 326:	84 b1       	in	r24, 0x04	; 4
 328:	84 60       	ori	r24, 0x04	; 4
 32a:	02 c0       	rjmp	.+4      	; 0x330 <_Z7pinModeii+0xd6>
 32c:	84 b1       	in	r24, 0x04	; 4
 32e:	8b 7f       	andi	r24, 0xFB	; 251
 330:	84 b9       	out	0x04, r24	; 4
 332:	08 95       	ret
        case 17: DDRB = mode==0?  DDRB | (1<< PB3) :   DDRB & ~(1<<PB3);    break;
 334:	67 2b       	or	r22, r23
 336:	19 f4       	brne	.+6      	; 0x33e <_Z7pinModeii+0xe4>
 338:	84 b1       	in	r24, 0x04	; 4
 33a:	88 60       	ori	r24, 0x08	; 8
 33c:	02 c0       	rjmp	.+4      	; 0x342 <_Z7pinModeii+0xe8>
 33e:	84 b1       	in	r24, 0x04	; 4
 340:	87 7f       	andi	r24, 0xF7	; 247
 342:	84 b9       	out	0x04, r24	; 4
 344:	08 95       	ret
        case 18: DDRB = mode==0?  DDRB | (1<< PB4) :   DDRB & ~(1<<PB4);    break;
 346:	67 2b       	or	r22, r23
 348:	19 f4       	brne	.+6      	; 0x350 <_Z7pinModeii+0xf6>
 34a:	84 b1       	in	r24, 0x04	; 4
 34c:	80 61       	ori	r24, 0x10	; 16
 34e:	02 c0       	rjmp	.+4      	; 0x354 <_Z7pinModeii+0xfa>
 350:	84 b1       	in	r24, 0x04	; 4
 352:	8f 7e       	andi	r24, 0xEF	; 239
 354:	84 b9       	out	0x04, r24	; 4
 356:	08 95       	ret
        case 19: DDRB = mode==0?  DDRB | (1<< PB5) :   DDRB & ~(1<<PB5);    break;
 358:	67 2b       	or	r22, r23
 35a:	19 f4       	brne	.+6      	; 0x362 <_Z7pinModeii+0x108>
 35c:	84 b1       	in	r24, 0x04	; 4
 35e:	80 62       	ori	r24, 0x20	; 32
 360:	02 c0       	rjmp	.+4      	; 0x366 <_Z7pinModeii+0x10c>
 362:	84 b1       	in	r24, 0x04	; 4
 364:	8f 7d       	andi	r24, 0xDF	; 223
 366:	84 b9       	out	0x04, r24	; 4
 368:	08 95       	ret
        case 9:  DDRB = mode==0?  DDRB | (1<< PB6) :   DDRB & ~(1<<PB6);    break;
 36a:	67 2b       	or	r22, r23
 36c:	19 f4       	brne	.+6      	; 0x374 <_Z7pinModeii+0x11a>
 36e:	84 b1       	in	r24, 0x04	; 4
 370:	80 64       	ori	r24, 0x40	; 64
 372:	02 c0       	rjmp	.+4      	; 0x378 <_Z7pinModeii+0x11e>
 374:	84 b1       	in	r24, 0x04	; 4
 376:	8f 7b       	andi	r24, 0xBF	; 191
 378:	84 b9       	out	0x04, r24	; 4
 37a:	08 95       	ret
        case 10: DDRB = mode==0?  DDRB | (1<< PB7) :   DDRB & ~(1<<PB7);    break;
 37c:	67 2b       	or	r22, r23
 37e:	19 f4       	brne	.+6      	; 0x386 <_Z7pinModeii+0x12c>
 380:	84 b1       	in	r24, 0x04	; 4
 382:	80 68       	ori	r24, 0x80	; 128
 384:	02 c0       	rjmp	.+4      	; 0x38a <_Z7pinModeii+0x130>
 386:	84 b1       	in	r24, 0x04	; 4
 388:	8f 77       	andi	r24, 0x7F	; 127
 38a:	84 b9       	out	0x04, r24	; 4
 38c:	08 95       	ret

        // PORT C
        case 23: DDRC = mode==0?  DDRC | (1<< PC0) :   DDRC & ~(1<<PB1);    break;
 38e:	67 2b       	or	r22, r23
 390:	19 f4       	brne	.+6      	; 0x398 <_Z7pinModeii+0x13e>
 392:	87 b1       	in	r24, 0x07	; 7
 394:	81 60       	ori	r24, 0x01	; 1
 396:	02 c0       	rjmp	.+4      	; 0x39c <_Z7pinModeii+0x142>
 398:	87 b1       	in	r24, 0x07	; 7
 39a:	8d 7f       	andi	r24, 0xFD	; 253
 39c:	87 b9       	out	0x07, r24	; 7
 39e:	08 95       	ret
        case 24: DDRC = mode==0?  DDRC | (1<< PC1) :   DDRC & ~(1<<PC1);    break;
 3a0:	67 2b       	or	r22, r23
 3a2:	19 f4       	brne	.+6      	; 0x3aa <_Z7pinModeii+0x150>
 3a4:	87 b1       	in	r24, 0x07	; 7
 3a6:	82 60       	ori	r24, 0x02	; 2
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <_Z7pinModeii+0x154>
 3aa:	87 b1       	in	r24, 0x07	; 7
 3ac:	8d 7f       	andi	r24, 0xFD	; 253
 3ae:	87 b9       	out	0x07, r24	; 7
 3b0:	08 95       	ret
        case 25: DDRC = mode==0?  DDRC | (1<< PC2) :   DDRC & ~(1<<PC2);    break;
 3b2:	67 2b       	or	r22, r23
 3b4:	19 f4       	brne	.+6      	; 0x3bc <_Z7pinModeii+0x162>
 3b6:	87 b1       	in	r24, 0x07	; 7
 3b8:	84 60       	ori	r24, 0x04	; 4
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <_Z7pinModeii+0x166>
 3bc:	87 b1       	in	r24, 0x07	; 7
 3be:	8b 7f       	andi	r24, 0xFB	; 251
 3c0:	87 b9       	out	0x07, r24	; 7
 3c2:	08 95       	ret
        case 26: DDRC = mode==0?  DDRC | (1<< PC3) :   DDRC & ~(1<<PC3);    break;
 3c4:	67 2b       	or	r22, r23
 3c6:	19 f4       	brne	.+6      	; 0x3ce <_Z7pinModeii+0x174>
 3c8:	87 b1       	in	r24, 0x07	; 7
 3ca:	88 60       	ori	r24, 0x08	; 8
 3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <_Z7pinModeii+0x178>
 3ce:	87 b1       	in	r24, 0x07	; 7
 3d0:	87 7f       	andi	r24, 0xF7	; 247
 3d2:	87 b9       	out	0x07, r24	; 7
 3d4:	08 95       	ret
        case 27: DDRC = mode==0?  DDRC | (1<< PC4) :   DDRC & ~(1<<PC4);    break;
 3d6:	67 2b       	or	r22, r23
 3d8:	19 f4       	brne	.+6      	; 0x3e0 <_Z7pinModeii+0x186>
 3da:	87 b1       	in	r24, 0x07	; 7
 3dc:	80 61       	ori	r24, 0x10	; 16
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <_Z7pinModeii+0x18a>
 3e0:	87 b1       	in	r24, 0x07	; 7
 3e2:	8f 7e       	andi	r24, 0xEF	; 239
 3e4:	87 b9       	out	0x07, r24	; 7
 3e6:	08 95       	ret
        case 28: DDRC = mode==0?  DDRC | (1<< PC5) :   DDRC & ~(1<<PC5);    break;
 3e8:	67 2b       	or	r22, r23
 3ea:	19 f4       	brne	.+6      	; 0x3f2 <_Z7pinModeii+0x198>
 3ec:	87 b1       	in	r24, 0x07	; 7
 3ee:	80 62       	ori	r24, 0x20	; 32
 3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <_Z7pinModeii+0x19c>
 3f2:	87 b1       	in	r24, 0x07	; 7
 3f4:	8f 7d       	andi	r24, 0xDF	; 223
 3f6:	87 b9       	out	0x07, r24	; 7
 3f8:	08 95       	ret
        case 1:  DDRC = mode==0?  DDRC | (1<< PC6) :   DDRC & ~(1<<PC6);    break;
 3fa:	67 2b       	or	r22, r23
 3fc:	19 f4       	brne	.+6      	; 0x404 <_Z7pinModeii+0x1aa>
 3fe:	87 b1       	in	r24, 0x07	; 7
 400:	80 64       	ori	r24, 0x40	; 64
 402:	02 c0       	rjmp	.+4      	; 0x408 <_Z7pinModeii+0x1ae>
 404:	87 b1       	in	r24, 0x07	; 7
 406:	8f 7b       	andi	r24, 0xBF	; 191
 408:	87 b9       	out	0x07, r24	; 7
 40a:	08 95       	ret

0000040c <_Z12digitalWriteii>:
    }
}

void digitalWrite(int pin, int mode){
        switch(pin){
 40c:	01 97       	sbiw	r24, 0x01	; 1
 40e:	8c 31       	cpi	r24, 0x1C	; 28
 410:	91 05       	cpc	r25, r1
 412:	08 f0       	brcs	.+2      	; 0x416 <_Z12digitalWriteii+0xa>
 414:	ea c0       	rjmp	.+468    	; 0x5ea <_Z12digitalWriteii+0x1de>
 416:	80 5b       	subi	r24, 0xB0	; 176
 418:	9f 4f       	sbci	r25, 0xFF	; 255
 41a:	fc 01       	movw	r30, r24
 41c:	0c 94 b5 04 	jmp	0x96a	; 0x96a <__tablejump2__>

        case 2:  PORTD = mode==1?  PORTD | (1<< PD0) :   PORTD & ~(1<<PD0);    break;
 420:	61 30       	cpi	r22, 0x01	; 1
 422:	71 05       	cpc	r23, r1
 424:	19 f4       	brne	.+6      	; 0x42c <_Z12digitalWriteii+0x20>
 426:	8b b1       	in	r24, 0x0b	; 11
 428:	81 60       	ori	r24, 0x01	; 1
 42a:	02 c0       	rjmp	.+4      	; 0x430 <_Z12digitalWriteii+0x24>
 42c:	8b b1       	in	r24, 0x0b	; 11
 42e:	8e 7f       	andi	r24, 0xFE	; 254
 430:	8b b9       	out	0x0b, r24	; 11
 432:	08 95       	ret
        case 3:  PORTD = mode==1?  PORTD | (1<< PD1) :   PORTD & ~(1<<PD1);    break;
 434:	61 30       	cpi	r22, 0x01	; 1
 436:	71 05       	cpc	r23, r1
 438:	19 f4       	brne	.+6      	; 0x440 <_Z12digitalWriteii+0x34>
 43a:	8b b1       	in	r24, 0x0b	; 11
 43c:	82 60       	ori	r24, 0x02	; 2
 43e:	02 c0       	rjmp	.+4      	; 0x444 <_Z12digitalWriteii+0x38>
 440:	8b b1       	in	r24, 0x0b	; 11
 442:	8d 7f       	andi	r24, 0xFD	; 253
 444:	8b b9       	out	0x0b, r24	; 11
 446:	08 95       	ret
        case 4:  PORTD = mode==1?  PORTD | (1<< PD2) :   PORTD & ~(1<<PD2);    break;
 448:	61 30       	cpi	r22, 0x01	; 1
 44a:	71 05       	cpc	r23, r1
 44c:	19 f4       	brne	.+6      	; 0x454 <_Z12digitalWriteii+0x48>
 44e:	8b b1       	in	r24, 0x0b	; 11
 450:	84 60       	ori	r24, 0x04	; 4
 452:	02 c0       	rjmp	.+4      	; 0x458 <_Z12digitalWriteii+0x4c>
 454:	8b b1       	in	r24, 0x0b	; 11
 456:	8b 7f       	andi	r24, 0xFB	; 251
 458:	8b b9       	out	0x0b, r24	; 11
 45a:	08 95       	ret
        case 5:  PORTD = mode==1?  PORTD | (1<< PD3) :   PORTD & ~(1<<PD3);    break;
 45c:	61 30       	cpi	r22, 0x01	; 1
 45e:	71 05       	cpc	r23, r1
 460:	19 f4       	brne	.+6      	; 0x468 <_Z12digitalWriteii+0x5c>
 462:	8b b1       	in	r24, 0x0b	; 11
 464:	88 60       	ori	r24, 0x08	; 8
 466:	02 c0       	rjmp	.+4      	; 0x46c <_Z12digitalWriteii+0x60>
 468:	8b b1       	in	r24, 0x0b	; 11
 46a:	87 7f       	andi	r24, 0xF7	; 247
 46c:	8b b9       	out	0x0b, r24	; 11
 46e:	08 95       	ret
        case 6:  PORTD = mode==1?  PORTD | (1<< PD4) :   PORTD & ~(1<<PD4);    break;
 470:	61 30       	cpi	r22, 0x01	; 1
 472:	71 05       	cpc	r23, r1
 474:	19 f4       	brne	.+6      	; 0x47c <_Z12digitalWriteii+0x70>
 476:	8b b1       	in	r24, 0x0b	; 11
 478:	80 61       	ori	r24, 0x10	; 16
 47a:	02 c0       	rjmp	.+4      	; 0x480 <_Z12digitalWriteii+0x74>
 47c:	8b b1       	in	r24, 0x0b	; 11
 47e:	8f 7e       	andi	r24, 0xEF	; 239
 480:	8b b9       	out	0x0b, r24	; 11
 482:	08 95       	ret
        case 11: PORTD = mode==1?  PORTD | (1<< PD5) :   PORTD & ~(1<<PD5);    break;
 484:	61 30       	cpi	r22, 0x01	; 1
 486:	71 05       	cpc	r23, r1
 488:	19 f4       	brne	.+6      	; 0x490 <_Z12digitalWriteii+0x84>
 48a:	8b b1       	in	r24, 0x0b	; 11
 48c:	80 62       	ori	r24, 0x20	; 32
 48e:	02 c0       	rjmp	.+4      	; 0x494 <_Z12digitalWriteii+0x88>
 490:	8b b1       	in	r24, 0x0b	; 11
 492:	8f 7d       	andi	r24, 0xDF	; 223
 494:	8b b9       	out	0x0b, r24	; 11
 496:	08 95       	ret
        case 12: PORTD = mode==1?  PORTD | (1<< PD6) :   PORTD & ~(1<<PD6);    break;
 498:	61 30       	cpi	r22, 0x01	; 1
 49a:	71 05       	cpc	r23, r1
 49c:	19 f4       	brne	.+6      	; 0x4a4 <_Z12digitalWriteii+0x98>
 49e:	8b b1       	in	r24, 0x0b	; 11
 4a0:	80 64       	ori	r24, 0x40	; 64
 4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <_Z12digitalWriteii+0x9c>
 4a4:	8b b1       	in	r24, 0x0b	; 11
 4a6:	8f 7b       	andi	r24, 0xBF	; 191
 4a8:	8b b9       	out	0x0b, r24	; 11
 4aa:	08 95       	ret
        case 13: PORTD = mode==1?  PORTD | (1<< PD7) :   PORTD & ~(1<<PD7);    break;
 4ac:	61 30       	cpi	r22, 0x01	; 1
 4ae:	71 05       	cpc	r23, r1
 4b0:	19 f4       	brne	.+6      	; 0x4b8 <_Z12digitalWriteii+0xac>
 4b2:	8b b1       	in	r24, 0x0b	; 11
 4b4:	80 68       	ori	r24, 0x80	; 128
 4b6:	02 c0       	rjmp	.+4      	; 0x4bc <_Z12digitalWriteii+0xb0>
 4b8:	8b b1       	in	r24, 0x0b	; 11
 4ba:	8f 77       	andi	r24, 0x7F	; 127
 4bc:	8b b9       	out	0x0b, r24	; 11
 4be:	08 95       	ret

        // PORTB
        case 14: PORTB = mode==1?  PORTB | (1<< PB0) :   PORTB & ~(1<<PB0);    break;
 4c0:	61 30       	cpi	r22, 0x01	; 1
 4c2:	71 05       	cpc	r23, r1
 4c4:	19 f4       	brne	.+6      	; 0x4cc <_Z12digitalWriteii+0xc0>
 4c6:	85 b1       	in	r24, 0x05	; 5
 4c8:	81 60       	ori	r24, 0x01	; 1
 4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <_Z12digitalWriteii+0xc4>
 4cc:	85 b1       	in	r24, 0x05	; 5
 4ce:	8e 7f       	andi	r24, 0xFE	; 254
 4d0:	85 b9       	out	0x05, r24	; 5
 4d2:	08 95       	ret
        case 15: PORTB = mode==1?  PORTB | (1<< PB1) :   PORTB & ~(1<<PB1);    break;
 4d4:	61 30       	cpi	r22, 0x01	; 1
 4d6:	71 05       	cpc	r23, r1
 4d8:	19 f4       	brne	.+6      	; 0x4e0 <_Z12digitalWriteii+0xd4>
 4da:	85 b1       	in	r24, 0x05	; 5
 4dc:	82 60       	ori	r24, 0x02	; 2
 4de:	02 c0       	rjmp	.+4      	; 0x4e4 <_Z12digitalWriteii+0xd8>
 4e0:	85 b1       	in	r24, 0x05	; 5
 4e2:	8d 7f       	andi	r24, 0xFD	; 253
 4e4:	85 b9       	out	0x05, r24	; 5
 4e6:	08 95       	ret
        case 16: PORTB = mode==1?  PORTB | (1<< PB2) :   PORTB & ~(1<<PB2);    break;
 4e8:	61 30       	cpi	r22, 0x01	; 1
 4ea:	71 05       	cpc	r23, r1
 4ec:	19 f4       	brne	.+6      	; 0x4f4 <_Z12digitalWriteii+0xe8>
 4ee:	85 b1       	in	r24, 0x05	; 5
 4f0:	84 60       	ori	r24, 0x04	; 4
 4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <_Z12digitalWriteii+0xec>
 4f4:	85 b1       	in	r24, 0x05	; 5
 4f6:	8b 7f       	andi	r24, 0xFB	; 251
 4f8:	85 b9       	out	0x05, r24	; 5
 4fa:	08 95       	ret
        case 17: PORTB = mode==1?  PORTB | (1<< PB3) :   PORTB & ~(1<<PB3);    break;
 4fc:	61 30       	cpi	r22, 0x01	; 1
 4fe:	71 05       	cpc	r23, r1
 500:	19 f4       	brne	.+6      	; 0x508 <_Z12digitalWriteii+0xfc>
 502:	85 b1       	in	r24, 0x05	; 5
 504:	88 60       	ori	r24, 0x08	; 8
 506:	02 c0       	rjmp	.+4      	; 0x50c <_Z12digitalWriteii+0x100>
 508:	85 b1       	in	r24, 0x05	; 5
 50a:	87 7f       	andi	r24, 0xF7	; 247
 50c:	85 b9       	out	0x05, r24	; 5
 50e:	08 95       	ret
        case 18: PORTB = mode==1?  PORTB | (1<< PB4) :   PORTB & ~(1<<PB4);    break;
 510:	61 30       	cpi	r22, 0x01	; 1
 512:	71 05       	cpc	r23, r1
 514:	19 f4       	brne	.+6      	; 0x51c <_Z12digitalWriteii+0x110>
 516:	85 b1       	in	r24, 0x05	; 5
 518:	80 61       	ori	r24, 0x10	; 16
 51a:	02 c0       	rjmp	.+4      	; 0x520 <_Z12digitalWriteii+0x114>
 51c:	85 b1       	in	r24, 0x05	; 5
 51e:	8f 7e       	andi	r24, 0xEF	; 239
 520:	85 b9       	out	0x05, r24	; 5
 522:	08 95       	ret
        case 19: PORTB = mode==1?  PORTB | (1<< PB5) :   PORTB & ~(1<<PB5);    break;
 524:	61 30       	cpi	r22, 0x01	; 1
 526:	71 05       	cpc	r23, r1
 528:	19 f4       	brne	.+6      	; 0x530 <_Z12digitalWriteii+0x124>
 52a:	85 b1       	in	r24, 0x05	; 5
 52c:	80 62       	ori	r24, 0x20	; 32
 52e:	02 c0       	rjmp	.+4      	; 0x534 <_Z12digitalWriteii+0x128>
 530:	85 b1       	in	r24, 0x05	; 5
 532:	8f 7d       	andi	r24, 0xDF	; 223
 534:	85 b9       	out	0x05, r24	; 5
 536:	08 95       	ret
        case 9:  PORTB = mode==1?  PORTB | (1<< PB6) :   PORTB & ~(1<<PB6);    break;
 538:	61 30       	cpi	r22, 0x01	; 1
 53a:	71 05       	cpc	r23, r1
 53c:	19 f4       	brne	.+6      	; 0x544 <_Z12digitalWriteii+0x138>
 53e:	85 b1       	in	r24, 0x05	; 5
 540:	80 64       	ori	r24, 0x40	; 64
 542:	02 c0       	rjmp	.+4      	; 0x548 <_Z12digitalWriteii+0x13c>
 544:	85 b1       	in	r24, 0x05	; 5
 546:	8f 7b       	andi	r24, 0xBF	; 191
 548:	85 b9       	out	0x05, r24	; 5
 54a:	08 95       	ret
        case 10: PORTB = mode==1?  PORTB | (1<< PB7) :   PORTB & ~(1<<PB7);    break;
 54c:	61 30       	cpi	r22, 0x01	; 1
 54e:	71 05       	cpc	r23, r1
 550:	19 f4       	brne	.+6      	; 0x558 <_Z12digitalWriteii+0x14c>
 552:	85 b1       	in	r24, 0x05	; 5
 554:	80 68       	ori	r24, 0x80	; 128
 556:	02 c0       	rjmp	.+4      	; 0x55c <_Z12digitalWriteii+0x150>
 558:	85 b1       	in	r24, 0x05	; 5
 55a:	8f 77       	andi	r24, 0x7F	; 127
 55c:	85 b9       	out	0x05, r24	; 5
 55e:	08 95       	ret

        // PORT C
        case 23: PORTC = mode==1?  PORTC | (1<< PC0) :   PORTC & ~(1<<PB1);    break;
 560:	61 30       	cpi	r22, 0x01	; 1
 562:	71 05       	cpc	r23, r1
 564:	19 f4       	brne	.+6      	; 0x56c <_Z12digitalWriteii+0x160>
 566:	88 b1       	in	r24, 0x08	; 8
 568:	81 60       	ori	r24, 0x01	; 1
 56a:	02 c0       	rjmp	.+4      	; 0x570 <_Z12digitalWriteii+0x164>
 56c:	88 b1       	in	r24, 0x08	; 8
 56e:	8d 7f       	andi	r24, 0xFD	; 253
 570:	88 b9       	out	0x08, r24	; 8
 572:	08 95       	ret
        case 24: PORTC = mode==1?  PORTC | (1<< PC1) :   PORTC & ~(1<<PC1);    break;
 574:	61 30       	cpi	r22, 0x01	; 1
 576:	71 05       	cpc	r23, r1
 578:	19 f4       	brne	.+6      	; 0x580 <_Z12digitalWriteii+0x174>
 57a:	88 b1       	in	r24, 0x08	; 8
 57c:	82 60       	ori	r24, 0x02	; 2
 57e:	02 c0       	rjmp	.+4      	; 0x584 <_Z12digitalWriteii+0x178>
 580:	88 b1       	in	r24, 0x08	; 8
 582:	8d 7f       	andi	r24, 0xFD	; 253
 584:	88 b9       	out	0x08, r24	; 8
 586:	08 95       	ret
        case 25: PORTC = mode==1?  PORTC | (1<< PC2) :   PORTC & ~(1<<PC2);    break;
 588:	61 30       	cpi	r22, 0x01	; 1
 58a:	71 05       	cpc	r23, r1
 58c:	19 f4       	brne	.+6      	; 0x594 <_Z12digitalWriteii+0x188>
 58e:	88 b1       	in	r24, 0x08	; 8
 590:	84 60       	ori	r24, 0x04	; 4
 592:	02 c0       	rjmp	.+4      	; 0x598 <_Z12digitalWriteii+0x18c>
 594:	88 b1       	in	r24, 0x08	; 8
 596:	8b 7f       	andi	r24, 0xFB	; 251
 598:	88 b9       	out	0x08, r24	; 8
 59a:	08 95       	ret
        case 26: PORTC = mode==1?  PORTC | (1<< PC3) :   PORTC & ~(1<<PC3);    break;
 59c:	61 30       	cpi	r22, 0x01	; 1
 59e:	71 05       	cpc	r23, r1
 5a0:	19 f4       	brne	.+6      	; 0x5a8 <_Z12digitalWriteii+0x19c>
 5a2:	88 b1       	in	r24, 0x08	; 8
 5a4:	88 60       	ori	r24, 0x08	; 8
 5a6:	02 c0       	rjmp	.+4      	; 0x5ac <_Z12digitalWriteii+0x1a0>
 5a8:	88 b1       	in	r24, 0x08	; 8
 5aa:	87 7f       	andi	r24, 0xF7	; 247
 5ac:	88 b9       	out	0x08, r24	; 8
 5ae:	08 95       	ret
        case 27: PORTC = mode==1?  PORTC | (1<< PC4) :   PORTC & ~(1<<PC4);    break;
 5b0:	61 30       	cpi	r22, 0x01	; 1
 5b2:	71 05       	cpc	r23, r1
 5b4:	19 f4       	brne	.+6      	; 0x5bc <_Z12digitalWriteii+0x1b0>
 5b6:	88 b1       	in	r24, 0x08	; 8
 5b8:	80 61       	ori	r24, 0x10	; 16
 5ba:	02 c0       	rjmp	.+4      	; 0x5c0 <_Z12digitalWriteii+0x1b4>
 5bc:	88 b1       	in	r24, 0x08	; 8
 5be:	8f 7e       	andi	r24, 0xEF	; 239
 5c0:	88 b9       	out	0x08, r24	; 8
 5c2:	08 95       	ret
        case 28: PORTC = mode==1?  PORTC | (1<< PC5) :   PORTC & ~(1<<PC5);    break;
 5c4:	61 30       	cpi	r22, 0x01	; 1
 5c6:	71 05       	cpc	r23, r1
 5c8:	19 f4       	brne	.+6      	; 0x5d0 <_Z12digitalWriteii+0x1c4>
 5ca:	88 b1       	in	r24, 0x08	; 8
 5cc:	80 62       	ori	r24, 0x20	; 32
 5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <_Z12digitalWriteii+0x1c8>
 5d0:	88 b1       	in	r24, 0x08	; 8
 5d2:	8f 7d       	andi	r24, 0xDF	; 223
 5d4:	88 b9       	out	0x08, r24	; 8
 5d6:	08 95       	ret
        case 1:  PORTC = mode==1?  PORTC | (1<< PC6) :   PORTC & ~(1<<PC6);    break;
 5d8:	61 30       	cpi	r22, 0x01	; 1
 5da:	71 05       	cpc	r23, r1
 5dc:	19 f4       	brne	.+6      	; 0x5e4 <_Z12digitalWriteii+0x1d8>
 5de:	88 b1       	in	r24, 0x08	; 8
 5e0:	80 64       	ori	r24, 0x40	; 64
 5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <_Z12digitalWriteii+0x1dc>
 5e4:	88 b1       	in	r24, 0x08	; 8
 5e6:	8f 7b       	andi	r24, 0xBF	; 191
 5e8:	88 b9       	out	0x08, r24	; 8
 5ea:	08 95       	ret

000005ec <_ZN5Motor4stopEv>:
void Motor::leftWheelBackward(){
    stop();
    digitalWrite(this->I2, HIGH);
}

void Motor::stop(){
 5ec:	cf 93       	push	r28
 5ee:	df 93       	push	r29
 5f0:	ec 01       	movw	r28, r24
    digitalWrite(this->I1, LOW);
 5f2:	60 e0       	ldi	r22, 0x00	; 0
 5f4:	70 e0       	ldi	r23, 0x00	; 0
 5f6:	8c 81       	ldd	r24, Y+4	; 0x04
 5f8:	9d 81       	ldd	r25, Y+5	; 0x05
 5fa:	0e 94 06 02 	call	0x40c	; 0x40c <_Z12digitalWriteii>
    digitalWrite(this->I2, LOW);
 5fe:	60 e0       	ldi	r22, 0x00	; 0
 600:	70 e0       	ldi	r23, 0x00	; 0
 602:	8e 81       	ldd	r24, Y+6	; 0x06
 604:	9f 81       	ldd	r25, Y+7	; 0x07
 606:	0e 94 06 02 	call	0x40c	; 0x40c <_Z12digitalWriteii>
    digitalWrite(this->I3, LOW);
 60a:	60 e0       	ldi	r22, 0x00	; 0
 60c:	70 e0       	ldi	r23, 0x00	; 0
 60e:	88 85       	ldd	r24, Y+8	; 0x08
 610:	99 85       	ldd	r25, Y+9	; 0x09
 612:	0e 94 06 02 	call	0x40c	; 0x40c <_Z12digitalWriteii>
    digitalWrite(this->I4, LOW);
 616:	60 e0       	ldi	r22, 0x00	; 0
 618:	70 e0       	ldi	r23, 0x00	; 0
 61a:	8a 85       	ldd	r24, Y+10	; 0x0a
 61c:	9b 85       	ldd	r25, Y+11	; 0x0b
 61e:	0e 94 06 02 	call	0x40c	; 0x40c <_Z12digitalWriteii>
}
 622:	df 91       	pop	r29
 624:	cf 91       	pop	r28
 626:	08 95       	ret

00000628 <_ZN5MotorC1Eiiiiii>:
#include "Motor.h"

#include "common.h"


Motor::Motor(int EN1, int EN2, int I1, int I2, int I3, int I4)
 628:	6f 92       	push	r6
 62a:	7f 92       	push	r7
 62c:	8f 92       	push	r8
 62e:	9f 92       	push	r9
 630:	af 92       	push	r10
 632:	bf 92       	push	r11
 634:	cf 92       	push	r12
 636:	df 92       	push	r13
 638:	ef 92       	push	r14
 63a:	ff 92       	push	r15
 63c:	0f 93       	push	r16
 63e:	1f 93       	push	r17
 640:	cf 93       	push	r28
 642:	df 93       	push	r29
 644:	ec 01       	movw	r28, r24
 646:	4b 01       	movw	r8, r22
 648:	5a 01       	movw	r10, r20
 64a:	39 01       	movw	r6, r18
{
    //ctor
    pinMode(EN1, INPUT); this->EN1 = EN1;
 64c:	61 e0       	ldi	r22, 0x01	; 1
 64e:	70 e0       	ldi	r23, 0x00	; 0
 650:	c4 01       	movw	r24, r8
 652:	0e 94 2d 01 	call	0x25a	; 0x25a <_Z7pinModeii>
 656:	99 82       	std	Y+1, r9	; 0x01
 658:	88 82       	st	Y, r8
    pinMode(EN2, INPUT); this->EN2 = EN2;
 65a:	61 e0       	ldi	r22, 0x01	; 1
 65c:	70 e0       	ldi	r23, 0x00	; 0
 65e:	c5 01       	movw	r24, r10
 660:	0e 94 2d 01 	call	0x25a	; 0x25a <_Z7pinModeii>
 664:	bb 82       	std	Y+3, r11	; 0x03
 666:	aa 82       	std	Y+2, r10	; 0x02

    pinMode(I1, OUTPUT); this->I1 = I1;
 668:	60 e0       	ldi	r22, 0x00	; 0
 66a:	70 e0       	ldi	r23, 0x00	; 0
 66c:	c3 01       	movw	r24, r6
 66e:	0e 94 2d 01 	call	0x25a	; 0x25a <_Z7pinModeii>
 672:	7d 82       	std	Y+5, r7	; 0x05
 674:	6c 82       	std	Y+4, r6	; 0x04
    pinMode(I2, OUTPUT); this->I2 = I2;
 676:	60 e0       	ldi	r22, 0x00	; 0
 678:	70 e0       	ldi	r23, 0x00	; 0
 67a:	c8 01       	movw	r24, r16
 67c:	0e 94 2d 01 	call	0x25a	; 0x25a <_Z7pinModeii>
 680:	1f 83       	std	Y+7, r17	; 0x07
 682:	0e 83       	std	Y+6, r16	; 0x06
    pinMode(I3, OUTPUT); this->I3 = I3;
 684:	60 e0       	ldi	r22, 0x00	; 0
 686:	70 e0       	ldi	r23, 0x00	; 0
 688:	c7 01       	movw	r24, r14
 68a:	0e 94 2d 01 	call	0x25a	; 0x25a <_Z7pinModeii>
 68e:	f9 86       	std	Y+9, r15	; 0x09
 690:	e8 86       	std	Y+8, r14	; 0x08
    pinMode(I4, OUTPUT); this->I4 = I4;
 692:	60 e0       	ldi	r22, 0x00	; 0
 694:	70 e0       	ldi	r23, 0x00	; 0
 696:	c6 01       	movw	r24, r12
 698:	0e 94 2d 01 	call	0x25a	; 0x25a <_Z7pinModeii>
 69c:	db 86       	std	Y+11, r13	; 0x0b
 69e:	ca 86       	std	Y+10, r12	; 0x0a

    // Gambita pra teste
    digitalWrite(EN1, HIGH);
 6a0:	61 e0       	ldi	r22, 0x01	; 1
 6a2:	70 e0       	ldi	r23, 0x00	; 0
 6a4:	c4 01       	movw	r24, r8
 6a6:	0e 94 06 02 	call	0x40c	; 0x40c <_Z12digitalWriteii>
    digitalWrite(EN2, HIGH);
 6aa:	61 e0       	ldi	r22, 0x01	; 1
 6ac:	70 e0       	ldi	r23, 0x00	; 0
 6ae:	c5 01       	movw	r24, r10
 6b0:	0e 94 06 02 	call	0x40c	; 0x40c <_Z12digitalWriteii>
    stop();
 6b4:	ce 01       	movw	r24, r28
 6b6:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_ZN5Motor4stopEv>
}
 6ba:	df 91       	pop	r29
 6bc:	cf 91       	pop	r28
 6be:	1f 91       	pop	r17
 6c0:	0f 91       	pop	r16
 6c2:	ff 90       	pop	r15
 6c4:	ef 90       	pop	r14
 6c6:	df 90       	pop	r13
 6c8:	cf 90       	pop	r12
 6ca:	bf 90       	pop	r11
 6cc:	af 90       	pop	r10
 6ce:	9f 90       	pop	r9
 6d0:	8f 90       	pop	r8
 6d2:	7f 90       	pop	r7
 6d4:	6f 90       	pop	r6
 6d6:	08 95       	ret

000006d8 <_ZN5Motor7forwardEv>:

void Motor::forward(){
 6d8:	cf 93       	push	r28
 6da:	df 93       	push	r29
 6dc:	ec 01       	movw	r28, r24
    stop();
 6de:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_ZN5Motor4stopEv>
    digitalWrite(this->I1, HIGH);
 6e2:	61 e0       	ldi	r22, 0x01	; 1
 6e4:	70 e0       	ldi	r23, 0x00	; 0
 6e6:	8c 81       	ldd	r24, Y+4	; 0x04
 6e8:	9d 81       	ldd	r25, Y+5	; 0x05
 6ea:	0e 94 06 02 	call	0x40c	; 0x40c <_Z12digitalWriteii>
    digitalWrite(this->I3, HIGH);
 6ee:	61 e0       	ldi	r22, 0x01	; 1
 6f0:	70 e0       	ldi	r23, 0x00	; 0
 6f2:	88 85       	ldd	r24, Y+8	; 0x08
 6f4:	99 85       	ldd	r25, Y+9	; 0x09
 6f6:	0e 94 06 02 	call	0x40c	; 0x40c <_Z12digitalWriteii>
}
 6fa:	df 91       	pop	r29
 6fc:	cf 91       	pop	r28
 6fe:	08 95       	ret

00000700 <_ZN5Motor8backwardEv>:
void Motor::backward(){
 700:	cf 93       	push	r28
 702:	df 93       	push	r29
 704:	ec 01       	movw	r28, r24
    stop();
 706:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_ZN5Motor4stopEv>
    digitalWrite(this->I2, HIGH);
 70a:	61 e0       	ldi	r22, 0x01	; 1
 70c:	70 e0       	ldi	r23, 0x00	; 0
 70e:	8e 81       	ldd	r24, Y+6	; 0x06
 710:	9f 81       	ldd	r25, Y+7	; 0x07
 712:	0e 94 06 02 	call	0x40c	; 0x40c <_Z12digitalWriteii>
    digitalWrite(this->I4, HIGH);
 716:	61 e0       	ldi	r22, 0x01	; 1
 718:	70 e0       	ldi	r23, 0x00	; 0
 71a:	8a 85       	ldd	r24, Y+10	; 0x0a
 71c:	9b 85       	ldd	r25, Y+11	; 0x0b
 71e:	0e 94 06 02 	call	0x40c	; 0x40c <_Z12digitalWriteii>
}
 722:	df 91       	pop	r29
 724:	cf 91       	pop	r28
 726:	08 95       	ret

00000728 <_ZN5Motor16rigtWheelForwardEv>:

void Motor::rigtWheelForward(){
 728:	cf 93       	push	r28
 72a:	df 93       	push	r29
 72c:	ec 01       	movw	r28, r24
    stop();
 72e:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_ZN5Motor4stopEv>
    digitalWrite(this->I3, HIGH);
 732:	61 e0       	ldi	r22, 0x01	; 1
 734:	70 e0       	ldi	r23, 0x00	; 0
 736:	88 85       	ldd	r24, Y+8	; 0x08
 738:	99 85       	ldd	r25, Y+9	; 0x09
 73a:	0e 94 06 02 	call	0x40c	; 0x40c <_Z12digitalWriteii>
}
 73e:	df 91       	pop	r29
 740:	cf 91       	pop	r28
 742:	08 95       	ret

00000744 <_ZN5Motor18rightWheelBackwardEv>:

void Motor::rightWheelBackward(){
 744:	cf 93       	push	r28
 746:	df 93       	push	r29
 748:	ec 01       	movw	r28, r24
    stop();
 74a:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_ZN5Motor4stopEv>
    digitalWrite(this->I4, HIGH);
 74e:	61 e0       	ldi	r22, 0x01	; 1
 750:	70 e0       	ldi	r23, 0x00	; 0
 752:	8a 85       	ldd	r24, Y+10	; 0x0a
 754:	9b 85       	ldd	r25, Y+11	; 0x0b
 756:	0e 94 06 02 	call	0x40c	; 0x40c <_Z12digitalWriteii>
}
 75a:	df 91       	pop	r29
 75c:	cf 91       	pop	r28
 75e:	08 95       	ret

00000760 <_ZN5Motor16leftWheelForwardEv>:

void Motor::leftWheelForward(){
 760:	cf 93       	push	r28
 762:	df 93       	push	r29
 764:	ec 01       	movw	r28, r24
    stop();
 766:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_ZN5Motor4stopEv>
    digitalWrite(this->I1, HIGH);
 76a:	61 e0       	ldi	r22, 0x01	; 1
 76c:	70 e0       	ldi	r23, 0x00	; 0
 76e:	8c 81       	ldd	r24, Y+4	; 0x04
 770:	9d 81       	ldd	r25, Y+5	; 0x05
 772:	0e 94 06 02 	call	0x40c	; 0x40c <_Z12digitalWriteii>
}
 776:	df 91       	pop	r29
 778:	cf 91       	pop	r28
 77a:	08 95       	ret

0000077c <_ZN5Motor17leftWheelBackwardEv>:

void Motor::leftWheelBackward(){
 77c:	cf 93       	push	r28
 77e:	df 93       	push	r29
 780:	ec 01       	movw	r28, r24
    stop();
 782:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_ZN5Motor4stopEv>
    digitalWrite(this->I2, HIGH);
 786:	61 e0       	ldi	r22, 0x01	; 1
 788:	70 e0       	ldi	r23, 0x00	; 0
 78a:	8e 81       	ldd	r24, Y+6	; 0x06
 78c:	9f 81       	ldd	r25, Y+7	; 0x07
 78e:	0e 94 06 02 	call	0x40c	; 0x40c <_Z12digitalWriteii>
}
 792:	df 91       	pop	r29
 794:	cf 91       	pop	r28
 796:	08 95       	ret

00000798 <_ZN5Motor18setRightWheelSpeedEj>:
    digitalWrite(this->I3, LOW);
    digitalWrite(this->I4, LOW);
}

void Motor::setRightWheelSpeed(uint16_t speed){
    if(speed > 255){
 798:	6f 3f       	cpi	r22, 0xFF	; 255
 79a:	71 05       	cpc	r23, r1
 79c:	39 f0       	breq	.+14     	; 0x7ac <_ZN5Motor18setRightWheelSpeedEj+0x14>
 79e:	30 f0       	brcs	.+12     	; 0x7ac <_ZN5Motor18setRightWheelSpeedEj+0x14>
        this->rightWheelSpeed = 255;
 7a0:	2f ef       	ldi	r18, 0xFF	; 255
 7a2:	30 e0       	ldi	r19, 0x00	; 0
 7a4:	fc 01       	movw	r30, r24
 7a6:	35 87       	std	Z+13, r19	; 0x0d
 7a8:	24 87       	std	Z+12, r18	; 0x0c
 7aa:	08 95       	ret
    }
    else{
        this->rightWheelSpeed = speed;
 7ac:	fc 01       	movw	r30, r24
 7ae:	75 87       	std	Z+13, r23	; 0x0d
 7b0:	64 87       	std	Z+12, r22	; 0x0c
 7b2:	08 95       	ret

000007b4 <_ZN5Motor17setLeftWheelSpeedEj>:
    }
}

void Motor::setLeftWheelSpeed(uint16_t speed){
    if(speed > 255){
 7b4:	6f 3f       	cpi	r22, 0xFF	; 255
 7b6:	71 05       	cpc	r23, r1
 7b8:	39 f0       	breq	.+14     	; 0x7c8 <_ZN5Motor17setLeftWheelSpeedEj+0x14>
 7ba:	30 f0       	brcs	.+12     	; 0x7c8 <_ZN5Motor17setLeftWheelSpeedEj+0x14>
        this->leftWheelSpeed = 255;
 7bc:	2f ef       	ldi	r18, 0xFF	; 255
 7be:	30 e0       	ldi	r19, 0x00	; 0
 7c0:	fc 01       	movw	r30, r24
 7c2:	37 87       	std	Z+15, r19	; 0x0f
 7c4:	26 87       	std	Z+14, r18	; 0x0e
 7c6:	08 95       	ret
    }
    else{
        this->leftWheelSpeed = speed;
 7c8:	fc 01       	movw	r30, r24
 7ca:	77 87       	std	Z+15, r23	; 0x0f
 7cc:	66 87       	std	Z+14, r22	; 0x0e
 7ce:	08 95       	ret

000007d0 <_Z10pwm_enable11PWM_CHANNEL>:
#include "pwm.h"


// Enable PWM channels
void pwm_enable(enum PWM_CHANNEL channel) {
	if (channel & CHAN_OC0A) TCCR0A |= 1<<COM0A1;
 7d0:	80 ff       	sbrs	r24, 0
 7d2:	03 c0       	rjmp	.+6      	; 0x7da <_Z10pwm_enable11PWM_CHANNEL+0xa>
 7d4:	94 b5       	in	r25, 0x24	; 36
 7d6:	90 68       	ori	r25, 0x80	; 128
 7d8:	94 bd       	out	0x24, r25	; 36
	if (channel & CHAN_OC0B) TCCR0A |= 1<<COM0B1;
 7da:	81 ff       	sbrs	r24, 1
 7dc:	03 c0       	rjmp	.+6      	; 0x7e4 <_Z10pwm_enable11PWM_CHANNEL+0x14>
 7de:	94 b5       	in	r25, 0x24	; 36
 7e0:	90 62       	ori	r25, 0x20	; 32
 7e2:	94 bd       	out	0x24, r25	; 36
	if (channel & CHAN_OC1A) TCCR1A |= 1<<COM1A1;
 7e4:	84 ff       	sbrs	r24, 4
 7e6:	05 c0       	rjmp	.+10     	; 0x7f2 <_Z10pwm_enable11PWM_CHANNEL+0x22>
 7e8:	e0 e8       	ldi	r30, 0x80	; 128
 7ea:	f0 e0       	ldi	r31, 0x00	; 0
 7ec:	90 81       	ld	r25, Z
 7ee:	90 68       	ori	r25, 0x80	; 128
 7f0:	90 83       	st	Z, r25
	if (channel & CHAN_OC1B) TCCR1A |= 1<<COM1B1;
 7f2:	85 ff       	sbrs	r24, 5
 7f4:	05 c0       	rjmp	.+10     	; 0x800 <_Z10pwm_enable11PWM_CHANNEL+0x30>
 7f6:	e0 e8       	ldi	r30, 0x80	; 128
 7f8:	f0 e0       	ldi	r31, 0x00	; 0
 7fa:	90 81       	ld	r25, Z
 7fc:	90 62       	ori	r25, 0x20	; 32
 7fe:	90 83       	st	Z, r25
	if (channel & CHAN_OC2A) TCCR2A |= 1<<COM2A1;
 800:	82 ff       	sbrs	r24, 2
 802:	05 c0       	rjmp	.+10     	; 0x80e <_Z10pwm_enable11PWM_CHANNEL+0x3e>
 804:	e0 eb       	ldi	r30, 0xB0	; 176
 806:	f0 e0       	ldi	r31, 0x00	; 0
 808:	90 81       	ld	r25, Z
 80a:	90 68       	ori	r25, 0x80	; 128
 80c:	90 83       	st	Z, r25
	if (channel & CHAN_OC2B) TCCR2A |= 1<<COM2B1;
 80e:	83 ff       	sbrs	r24, 3
 810:	05 c0       	rjmp	.+10     	; 0x81c <_Z10pwm_enable11PWM_CHANNEL+0x4c>
 812:	e0 eb       	ldi	r30, 0xB0	; 176
 814:	f0 e0       	ldi	r31, 0x00	; 0
 816:	80 81       	ld	r24, Z
 818:	80 62       	ori	r24, 0x20	; 32
 81a:	80 83       	st	Z, r24
 81c:	08 95       	ret

0000081e <_Z11pwm_disable11PWM_CHANNEL>:
}
// Disable PWM channels
void pwm_disable(enum PWM_CHANNEL channel) {
	if (channel & CHAN_OC0A) TCCR0A &= ~(1<<COM0A1);
 81e:	80 ff       	sbrs	r24, 0
 820:	03 c0       	rjmp	.+6      	; 0x828 <_Z11pwm_disable11PWM_CHANNEL+0xa>
 822:	94 b5       	in	r25, 0x24	; 36
 824:	9f 77       	andi	r25, 0x7F	; 127
 826:	94 bd       	out	0x24, r25	; 36
	if (channel & CHAN_OC0B) TCCR0A &= ~(1<<COM0B1);
 828:	81 ff       	sbrs	r24, 1
 82a:	03 c0       	rjmp	.+6      	; 0x832 <_Z11pwm_disable11PWM_CHANNEL+0x14>
 82c:	94 b5       	in	r25, 0x24	; 36
 82e:	9f 7d       	andi	r25, 0xDF	; 223
 830:	94 bd       	out	0x24, r25	; 36
	if (channel & CHAN_OC1A) TCCR1A &= ~(1<<COM1A1);
 832:	84 ff       	sbrs	r24, 4
 834:	05 c0       	rjmp	.+10     	; 0x840 <_Z11pwm_disable11PWM_CHANNEL+0x22>
 836:	e0 e8       	ldi	r30, 0x80	; 128
 838:	f0 e0       	ldi	r31, 0x00	; 0
 83a:	90 81       	ld	r25, Z
 83c:	9f 77       	andi	r25, 0x7F	; 127
 83e:	90 83       	st	Z, r25
	if (channel & CHAN_OC1B) TCCR1A &= ~(1<<COM1B1);
 840:	85 ff       	sbrs	r24, 5
 842:	05 c0       	rjmp	.+10     	; 0x84e <_Z11pwm_disable11PWM_CHANNEL+0x30>
 844:	e0 e8       	ldi	r30, 0x80	; 128
 846:	f0 e0       	ldi	r31, 0x00	; 0
 848:	90 81       	ld	r25, Z
 84a:	9f 7d       	andi	r25, 0xDF	; 223
 84c:	90 83       	st	Z, r25
	if (channel & CHAN_OC2A) TCCR2A &= ~(1<<COM2A1);
 84e:	82 ff       	sbrs	r24, 2
 850:	05 c0       	rjmp	.+10     	; 0x85c <_Z11pwm_disable11PWM_CHANNEL+0x3e>
 852:	e0 eb       	ldi	r30, 0xB0	; 176
 854:	f0 e0       	ldi	r31, 0x00	; 0
 856:	90 81       	ld	r25, Z
 858:	9f 77       	andi	r25, 0x7F	; 127
 85a:	90 83       	st	Z, r25
	if (channel & CHAN_OC2B) TCCR2A &= ~(1<<COM2B1);
 85c:	83 ff       	sbrs	r24, 3
 85e:	05 c0       	rjmp	.+10     	; 0x86a <_Z11pwm_disable11PWM_CHANNEL+0x4c>
 860:	e0 eb       	ldi	r30, 0xB0	; 176
 862:	f0 e0       	ldi	r31, 0x00	; 0
 864:	80 81       	ld	r24, Z
 866:	8f 7d       	andi	r24, 0xDF	; 223
 868:	80 83       	st	Z, r24
 86a:	08 95       	ret

0000086c <_Z13pwm_dutycycle11PWM_CHANNELh>:
}

// Sets the channel brightness
void pwm_dutycycle(enum PWM_CHANNEL channel, uint8_t dutycycle) {
	if (channel & CHAN_OC0A) OCR0A = dutycycle;
 86c:	80 fd       	sbrc	r24, 0
 86e:	67 bd       	out	0x27, r22	; 39
	if (channel & CHAN_OC0B) OCR0B = dutycycle;
 870:	81 fd       	sbrc	r24, 1
 872:	68 bd       	out	0x28, r22	; 40
	if (channel & CHAN_OC1A) OCR1A = dutycycle;
 874:	84 ff       	sbrs	r24, 4
 876:	06 c0       	rjmp	.+12     	; 0x884 <_Z13pwm_dutycycle11PWM_CHANNELh+0x18>
 878:	26 2f       	mov	r18, r22
 87a:	30 e0       	ldi	r19, 0x00	; 0
 87c:	30 93 89 00 	sts	0x0089, r19
 880:	20 93 88 00 	sts	0x0088, r18
	if (channel & CHAN_OC1B) OCR1B = dutycycle;
 884:	85 ff       	sbrs	r24, 5
 886:	06 c0       	rjmp	.+12     	; 0x894 <_Z13pwm_dutycycle11PWM_CHANNELh+0x28>
 888:	26 2f       	mov	r18, r22
 88a:	30 e0       	ldi	r19, 0x00	; 0
 88c:	30 93 8b 00 	sts	0x008B, r19
 890:	20 93 8a 00 	sts	0x008A, r18
	if (channel & CHAN_OC2A) OCR2A = dutycycle;
 894:	82 fd       	sbrc	r24, 2
 896:	60 93 b3 00 	sts	0x00B3, r22
	if (channel & CHAN_OC2B) OCR2B = dutycycle;
 89a:	83 fd       	sbrc	r24, 3
 89c:	60 93 b4 00 	sts	0x00B4, r22
 8a0:	08 95       	ret

000008a2 <_Z14pwm_initialize11PWM_CHANNEL>:
    // Set mode of operation to FastPWM
    // Set clock source (prescaler)
    // Set to 50% duty cycle
    // 4 PWM channel outputs

	if (channel & CHAN_OC0A){
 8a2:	80 ff       	sbrs	r24, 0
 8a4:	0c c0       	rjmp	.+24     	; 0x8be <_Z14pwm_initialize11PWM_CHANNEL+0x1c>
        TCCR0A |= (1<<WGM00 | 1<<WGM01);
 8a6:	94 b5       	in	r25, 0x24	; 36
 8a8:	93 60       	ori	r25, 0x03	; 3
 8aa:	94 bd       	out	0x24, r25	; 36
        TCCR0B |= (1<<CS01);
 8ac:	95 b5       	in	r25, 0x25	; 37
 8ae:	92 60       	ori	r25, 0x02	; 2
 8b0:	95 bd       	out	0x25, r25	; 37

        OCR2A = 0x00;
 8b2:	10 92 b3 00 	sts	0x00B3, r1
        OCR2B = 0x00;
 8b6:	10 92 b4 00 	sts	0x00B4, r1

        DDRD |= 1<<PD5; // OC0B
 8ba:	55 9a       	sbi	0x0a, 5	; 10
        DDRD |= 1<<PD6; // OC0A
 8bc:	56 9a       	sbi	0x0a, 6	; 10
	}
	if (channel & CHAN_OC0B) {
        //Not implemented yet
	}
	if (channel & CHAN_OC1A) {
 8be:	84 ff       	sbrs	r24, 4
 8c0:	14 c0       	rjmp	.+40     	; 0x8ea <_Z14pwm_initialize11PWM_CHANNEL+0x48>
        TCCR1A |= (1<<WGM10 | 1<<WGM11);
 8c2:	e0 e8       	ldi	r30, 0x80	; 128
 8c4:	f0 e0       	ldi	r31, 0x00	; 0
 8c6:	90 81       	ld	r25, Z
 8c8:	93 60       	ori	r25, 0x03	; 3
 8ca:	90 83       	st	Z, r25
        TCCR1B |= (1<<CS01);
 8cc:	e1 e8       	ldi	r30, 0x81	; 129
 8ce:	f0 e0       	ldi	r31, 0x00	; 0
 8d0:	90 81       	ld	r25, Z
 8d2:	92 60       	ori	r25, 0x02	; 2
 8d4:	90 83       	st	Z, r25

        OCR1A = 0x00;
 8d6:	10 92 89 00 	sts	0x0089, r1
 8da:	10 92 88 00 	sts	0x0088, r1
        OCR1B = 0x00;
 8de:	10 92 8b 00 	sts	0x008B, r1
 8e2:	10 92 8a 00 	sts	0x008A, r1

        DDRB |= 1<<PB1; // OC1A
 8e6:	21 9a       	sbi	0x04, 1	; 4
        DDRB |= 1<<PD2; // OC1B
 8e8:	22 9a       	sbi	0x04, 2	; 4

	}
	if (channel & CHAN_OC1B) {
        //Not implemented yet
	}
	if (channel & CHAN_OC2A) {
 8ea:	82 ff       	sbrs	r24, 2
 8ec:	0e c0       	rjmp	.+28     	; 0x90a <__stack+0xb>
        TCCR2A |= (1<<WGM20 | 1<<WGM21);
 8ee:	e0 eb       	ldi	r30, 0xB0	; 176
 8f0:	f0 e0       	ldi	r31, 0x00	; 0
 8f2:	80 81       	ld	r24, Z
 8f4:	83 60       	ori	r24, 0x03	; 3
 8f6:	80 83       	st	Z, r24
        TCCR2B |= (1<<CS21);
 8f8:	e1 eb       	ldi	r30, 0xB1	; 177
 8fa:	f0 e0       	ldi	r31, 0x00	; 0
 8fc:	80 81       	ld	r24, Z
 8fe:	82 60       	ori	r24, 0x02	; 2
 900:	80 83       	st	Z, r24

        OCR0A = 0x00;
 902:	17 bc       	out	0x27, r1	; 39
        OCR0B = 0x00;
 904:	18 bc       	out	0x28, r1	; 40

        DDRB |= 1<<PB3; // OC2A
 906:	23 9a       	sbi	0x04, 3	; 4
        DDRD |= 1<<PD3; // OC2B
 908:	53 9a       	sbi	0x0a, 3	; 10
 90a:	08 95       	ret

0000090c <__mulsi3>:
 90c:	db 01       	movw	r26, r22
 90e:	8f 93       	push	r24
 910:	9f 93       	push	r25
 912:	0e 94 bb 04 	call	0x976	; 0x976 <__muluhisi3>
 916:	bf 91       	pop	r27
 918:	af 91       	pop	r26
 91a:	a2 9f       	mul	r26, r18
 91c:	80 0d       	add	r24, r0
 91e:	91 1d       	adc	r25, r1
 920:	a3 9f       	mul	r26, r19
 922:	90 0d       	add	r25, r0
 924:	b2 9f       	mul	r27, r18
 926:	90 0d       	add	r25, r0
 928:	11 24       	eor	r1, r1
 92a:	08 95       	ret

0000092c <__divmodsi4>:
 92c:	05 2e       	mov	r0, r21
 92e:	97 fb       	bst	r25, 7
 930:	1e f4       	brtc	.+6      	; 0x938 <__divmodsi4+0xc>
 932:	00 94       	com	r0
 934:	0e 94 ad 04 	call	0x95a	; 0x95a <__negsi2>
 938:	57 fd       	sbrc	r21, 7
 93a:	07 d0       	rcall	.+14     	; 0x94a <__divmodsi4_neg2>
 93c:	0e 94 c6 04 	call	0x98c	; 0x98c <__udivmodsi4>
 940:	07 fc       	sbrc	r0, 7
 942:	03 d0       	rcall	.+6      	; 0x94a <__divmodsi4_neg2>
 944:	4e f4       	brtc	.+18     	; 0x958 <__divmodsi4_exit>
 946:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__negsi2>

0000094a <__divmodsi4_neg2>:
 94a:	50 95       	com	r21
 94c:	40 95       	com	r20
 94e:	30 95       	com	r19
 950:	21 95       	neg	r18
 952:	3f 4f       	sbci	r19, 0xFF	; 255
 954:	4f 4f       	sbci	r20, 0xFF	; 255
 956:	5f 4f       	sbci	r21, 0xFF	; 255

00000958 <__divmodsi4_exit>:
 958:	08 95       	ret

0000095a <__negsi2>:
 95a:	90 95       	com	r25
 95c:	80 95       	com	r24
 95e:	70 95       	com	r23
 960:	61 95       	neg	r22
 962:	7f 4f       	sbci	r23, 0xFF	; 255
 964:	8f 4f       	sbci	r24, 0xFF	; 255
 966:	9f 4f       	sbci	r25, 0xFF	; 255
 968:	08 95       	ret

0000096a <__tablejump2__>:
 96a:	ee 0f       	add	r30, r30
 96c:	ff 1f       	adc	r31, r31
 96e:	05 90       	lpm	r0, Z+
 970:	f4 91       	lpm	r31, Z
 972:	e0 2d       	mov	r30, r0
 974:	09 94       	ijmp

00000976 <__muluhisi3>:
 976:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <__umulhisi3>
 97a:	a5 9f       	mul	r26, r21
 97c:	90 0d       	add	r25, r0
 97e:	b4 9f       	mul	r27, r20
 980:	90 0d       	add	r25, r0
 982:	a4 9f       	mul	r26, r20
 984:	80 0d       	add	r24, r0
 986:	91 1d       	adc	r25, r1
 988:	11 24       	eor	r1, r1
 98a:	08 95       	ret

0000098c <__udivmodsi4>:
 98c:	a1 e2       	ldi	r26, 0x21	; 33
 98e:	1a 2e       	mov	r1, r26
 990:	aa 1b       	sub	r26, r26
 992:	bb 1b       	sub	r27, r27
 994:	fd 01       	movw	r30, r26
 996:	0d c0       	rjmp	.+26     	; 0x9b2 <__udivmodsi4_ep>

00000998 <__udivmodsi4_loop>:
 998:	aa 1f       	adc	r26, r26
 99a:	bb 1f       	adc	r27, r27
 99c:	ee 1f       	adc	r30, r30
 99e:	ff 1f       	adc	r31, r31
 9a0:	a2 17       	cp	r26, r18
 9a2:	b3 07       	cpc	r27, r19
 9a4:	e4 07       	cpc	r30, r20
 9a6:	f5 07       	cpc	r31, r21
 9a8:	20 f0       	brcs	.+8      	; 0x9b2 <__udivmodsi4_ep>
 9aa:	a2 1b       	sub	r26, r18
 9ac:	b3 0b       	sbc	r27, r19
 9ae:	e4 0b       	sbc	r30, r20
 9b0:	f5 0b       	sbc	r31, r21

000009b2 <__udivmodsi4_ep>:
 9b2:	66 1f       	adc	r22, r22
 9b4:	77 1f       	adc	r23, r23
 9b6:	88 1f       	adc	r24, r24
 9b8:	99 1f       	adc	r25, r25
 9ba:	1a 94       	dec	r1
 9bc:	69 f7       	brne	.-38     	; 0x998 <__udivmodsi4_loop>
 9be:	60 95       	com	r22
 9c0:	70 95       	com	r23
 9c2:	80 95       	com	r24
 9c4:	90 95       	com	r25
 9c6:	9b 01       	movw	r18, r22
 9c8:	ac 01       	movw	r20, r24
 9ca:	bd 01       	movw	r22, r26
 9cc:	cf 01       	movw	r24, r30
 9ce:	08 95       	ret

000009d0 <__umulhisi3>:
 9d0:	a2 9f       	mul	r26, r18
 9d2:	b0 01       	movw	r22, r0
 9d4:	b3 9f       	mul	r27, r19
 9d6:	c0 01       	movw	r24, r0
 9d8:	a3 9f       	mul	r26, r19
 9da:	70 0d       	add	r23, r0
 9dc:	81 1d       	adc	r24, r1
 9de:	11 24       	eor	r1, r1
 9e0:	91 1d       	adc	r25, r1
 9e2:	b2 9f       	mul	r27, r18
 9e4:	70 0d       	add	r23, r0
 9e6:	81 1d       	adc	r24, r1
 9e8:	11 24       	eor	r1, r1
 9ea:	91 1d       	adc	r25, r1
 9ec:	08 95       	ret

000009ee <_exit>:
 9ee:	f8 94       	cli

000009f0 <__stop_program>:
 9f0:	ff cf       	rjmp	.-2      	; 0x9f0 <__stop_program>
